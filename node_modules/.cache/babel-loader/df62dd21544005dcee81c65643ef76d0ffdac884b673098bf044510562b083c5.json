{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exists = void 0;\nvar dictionary_1 = require(\"./dictionary\");\nvar defualtOptions = {\n  allowOneLetterWords: false\n};\nvar exists = function (text, options) {\n  if (options === void 0) {\n    options = defualtOptions;\n  }\n  if (typeof text !== \"string\") {\n    throw new TypeError(\"Text must be of type string.\");\n  }\n  var cleanedText = text.trim().toLowerCase();\n  if (cleanedText.length === 0) {\n    return false;\n  }\n  if (cleanedText.length === 1) {\n    if (options.allowOneLetterWords) {\n      return cleanedText === \"i\" || cleanedText === \"a\";\n    }\n    return false;\n  }\n  var dictionary = (0, dictionary_1.getDictionary)();\n  var wordPrefixGroup = dictionary[cleanedText.slice(0, 2)];\n  var wordExists = Boolean(wordPrefixGroup === null || wordPrefixGroup === void 0 ? void 0 : wordPrefixGroup.includes(cleanedText));\n  return wordExists;\n};\nexports.exists = exists;","map":{"version":3,"names":["Object","defineProperty","exports","value","exists","dictionary_1","require","defualtOptions","allowOneLetterWords","text","options","TypeError","cleanedText","trim","toLowerCase","length","dictionary","getDictionary","wordPrefixGroup","slice","wordExists","Boolean","includes"],"sources":["/Users/int1347/Documents/React/wordel/node_modules/word-lib/lib/exists.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.exists = void 0;\r\nvar dictionary_1 = require(\"./dictionary\");\r\nvar defualtOptions = {\r\n    allowOneLetterWords: false,\r\n};\r\nvar exists = function (text, options) {\r\n    if (options === void 0) { options = defualtOptions; }\r\n    if (typeof text !== \"string\") {\r\n        throw new TypeError(\"Text must be of type string.\");\r\n    }\r\n    var cleanedText = text.trim().toLowerCase();\r\n    if (cleanedText.length === 0) {\r\n        return false;\r\n    }\r\n    if (cleanedText.length === 1) {\r\n        if (options.allowOneLetterWords) {\r\n            return cleanedText === \"i\" || cleanedText === \"a\";\r\n        }\r\n        return false;\r\n    }\r\n    var dictionary = (0, dictionary_1.getDictionary)();\r\n    var wordPrefixGroup = dictionary[cleanedText.slice(0, 2)];\r\n    var wordExists = Boolean(wordPrefixGroup === null || wordPrefixGroup === void 0 ? void 0 : wordPrefixGroup.includes(cleanedText));\r\n    return wordExists;\r\n};\r\nexports.exists = exists;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,IAAIC,YAAY,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAIC,cAAc,GAAG;EACjBC,mBAAmB,EAAE;AACzB,CAAC;AACD,IAAIJ,MAAM,GAAG,UAAUK,IAAI,EAAEC,OAAO,EAAE;EAClC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAGH,cAAc;EAAE;EACpD,IAAI,OAAOE,IAAI,KAAK,QAAQ,EAAE;IAC1B,MAAM,IAAIE,SAAS,CAAC,8BAA8B,CAAC;EACvD;EACA,IAAIC,WAAW,GAAGH,IAAI,CAACI,IAAI,EAAE,CAACC,WAAW,EAAE;EAC3C,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,KAAK;EAChB;EACA,IAAIH,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;IAC1B,IAAIL,OAAO,CAACF,mBAAmB,EAAE;MAC7B,OAAOI,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,GAAG;IACrD;IACA,OAAO,KAAK;EAChB;EACA,IAAII,UAAU,GAAG,CAAC,CAAC,EAAEX,YAAY,CAACY,aAAa,GAAG;EAClD,IAAIC,eAAe,GAAGF,UAAU,CAACJ,WAAW,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzD,IAAIC,UAAU,GAAGC,OAAO,CAACH,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACI,QAAQ,CAACV,WAAW,CAAC,CAAC;EACjI,OAAOQ,UAAU;AACrB,CAAC;AACDlB,OAAO,CAACE,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}