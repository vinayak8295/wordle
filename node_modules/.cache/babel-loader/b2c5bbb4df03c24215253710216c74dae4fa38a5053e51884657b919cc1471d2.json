{"ast":null,"code":"import _objectSpread from\"/Users/int1347/Documents/React/wordel/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/int1347/Documents/React/wordel/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/int1347/Documents/React/wordel/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import Board from\"./Components/Board\";import Keyboard from'./Components/Keyboard';import React from'react';import{useState}from'react';import{createContext}from'react';import{generateWordSet}from'./word';import{boardDefault}from'./word';import{useEffect}from'react';import GameOver from'./Components/GameOver';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var AppContext=/*#__PURE__*/createContext();function App(){var _useState=useState(boardDefault),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState({attempt:0,letter:0}),_useState4=_slicedToArray(_useState3,2),currAttempt=_useState4[0],setCurrAttempt=_useState4[1];var _useState5=useState(new Set()),_useState6=_slicedToArray(_useState5,2),wordSet=_useState6[0],setWordSet=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),correctWord=_useState8[0],setCorrectWord=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),disabledLetters=_useState10[0],setDisabledLetters=_useState10[1];var _useState11=useState({gameOver:false,guessedWord:false}),_useState12=_slicedToArray(_useState11,2),gameOver=_useState12[0],setGameOver=_useState12[1];useEffect(function(){generateWordSet().then(function(words){setWordSet(words.wordSet);setCorrectWord(words.todaysWord);console.log(words.todaysWord);});},[]);var onEnter=function onEnter(){if(currAttempt.letter!==5)return;var currWord=\"\";for(var i=0;i<5;i++){currWord+=board[currAttempt.attempt][i];}if(wordSet.has(currWord.toLowerCase())){setCurrAttempt({attempt:currAttempt.attempt+1,letter:0});}else{alert(\"Word not found\");}if(currWord.toLowerCase()===correctWord){console.log(\"correct word\");setGameOver({gameOver:true,guessedWord:true});return;}console.log(currAttempt);if(currAttempt.attempt===5){setGameOver({gameOver:true,guessedWord:false});return;}};var onDelete=function onDelete(){if(currAttempt.letter===0)return;var newBoard=_toConsumableArray(board);newBoard[currAttempt.attempt][currAttempt.letter-1]=\"\";setBoard(newBoard);setCurrAttempt(_objectSpread(_objectSpread({},currAttempt),{},{letter:currAttempt.letter-1}));};var onSelectLetter=function onSelectLetter(key){if(currAttempt.letter>4)return;var newBoard=_toConsumableArray(board);newBoard[currAttempt.attempt][currAttempt.letter]=key;setBoard(newBoard);setCurrAttempt({attempt:currAttempt.attempt,letter:currAttempt.letter+1});};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"nav\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Wordle\"})}),/*#__PURE__*/_jsx(AppContext.Provider,{value:{board:board,setBoard:setBoard,currAttempt:currAttempt,setCurrAttempt:setCurrAttempt,correctWord:correctWord,onSelectLetter:onSelectLetter,onDelete:onDelete,onEnter:onEnter,setDisabledLetters:setDisabledLetters,disabledLetters:disabledLetters,gameOver:gameOver},children:/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(Board,{}),gameOver.gameOver?/*#__PURE__*/_jsx(GameOver,{}):/*#__PURE__*/_jsx(Keyboard,{})]})})]});}export default App;","map":{"version":3,"names":["Board","Keyboard","React","useState","createContext","generateWordSet","boardDefault","useEffect","GameOver","AppContext","App","board","setBoard","attempt","letter","currAttempt","setCurrAttempt","Set","wordSet","setWordSet","correctWord","setCorrectWord","disabledLetters","setDisabledLetters","gameOver","guessedWord","setGameOver","then","words","todaysWord","console","log","onEnter","currWord","i","has","toLowerCase","alert","onDelete","newBoard","onSelectLetter","key"],"sources":["/Users/int1347/Documents/React/wordel/src/App.js"],"sourcesContent":["import './App.css';\nimport Board from \"./Components/Board\";\nimport Keyboard from './Components/Keyboard';\nimport React from 'react';\nimport { useState} from 'react';\nimport { createContext } from 'react';\nimport { generateWordSet } from './word';\nimport { boardDefault } from './word';\nimport { useEffect } from 'react';\nimport GameOver from './Components/GameOver';\nexport const AppContext = createContext();\n\nfunction App() {\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letter: 0 });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n\n  useEffect(() => {\n    generateWordSet().then((words) => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n      console.log(words.todaysWord);\n    });\n  }, []);\n\n  \n  const onEnter = () => {\n    if (currAttempt.letter !== 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letter: 0 });\n    } else {\n      alert(\"Word not found\");\n    }\n    if (currWord.toLowerCase() === correctWord) {\n      console.log(\"correct word\");\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n    }\n    console.log(currAttempt);\n    if (currAttempt.attempt === 5) {\n      setGameOver({ gameOver: true, guessedWord: false });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letter: currAttempt.letter - 1 });\n  };\n\n\n  const onSelectLetter = (key) => {\n    if (currAttempt.letter > 4) return;\n\n    const newBoard = [...board];\n\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>Wordle</h1>\n        \n        </nav>\n        <AppContext.Provider \n        value={{\n          board,\n          setBoard,\n          currAttempt,\n          setCurrAttempt,\n          correctWord,\n          onSelectLetter,\n          onDelete,\n          onEnter,\n          setDisabledLetters,\n          disabledLetters,\n          gameOver,\n        }\n        }>\n        <div className=\"game\">\n          <Board />\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n        </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}