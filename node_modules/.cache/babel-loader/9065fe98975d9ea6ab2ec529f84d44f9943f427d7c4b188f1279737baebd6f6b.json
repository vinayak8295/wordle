{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.random = void 0;\nvar dictionary_1 = require(\"./dictionary\");\nvar random = function (maxLength) {\n  if (maxLength) {\n    if (typeof maxLength !== \"number\") {\n      throw new TypeError(\"Max length must be of type string.\");\n    }\n    maxLength = Math.floor(maxLength);\n    if (maxLength < 3) {\n      throw new Error(\"Maximum length of random word must be atlesat 3.\");\n    }\n  }\n  var _word = \"\";\n  var dictionary = (0, dictionary_1.getDictionary)();\n  var shuffledWordSet = shuffle(Object.values(dictionary));\n  exit_loop: for (var i = 0; i < shuffledWordSet.length; i++) {\n    var set = shuffle(shuffledWordSet[i]);\n    for (var j = 0; j < set.length; j++) {\n      var word = set[j];\n      if (word.length >= 3) {\n        if (!maxLength || maxLength && word.length <= maxLength) {\n          _word = word;\n          break exit_loop;\n        }\n      }\n    }\n  }\n  return _word;\n};\nexports.random = random;\nfunction shuffle(array) {\n  var _a;\n  var currentIndex = array.length;\n  var randomIndex;\n  // While there remain elements to shuffle.\n  while (currentIndex != 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    // And swap it with the current element.\n    _a = [array[randomIndex], array[currentIndex]], array[currentIndex] = _a[0], array[randomIndex] = _a[1];\n  }\n  return array;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","random","dictionary_1","require","maxLength","TypeError","Math","floor","Error","_word","dictionary","getDictionary","shuffledWordSet","shuffle","values","exit_loop","i","length","set","j","word","array","_a","currentIndex","randomIndex"],"sources":["/Users/int1347/Documents/React/wordel/node_modules/word-lib/lib/random.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.random = void 0;\r\nvar dictionary_1 = require(\"./dictionary\");\r\nvar random = function (maxLength) {\r\n    if (maxLength) {\r\n        if (typeof maxLength !== \"number\") {\r\n            throw new TypeError(\"Max length must be of type string.\");\r\n        }\r\n        maxLength = Math.floor(maxLength);\r\n        if (maxLength < 3) {\r\n            throw new Error(\"Maximum length of random word must be atlesat 3.\");\r\n        }\r\n    }\r\n    var _word = \"\";\r\n    var dictionary = (0, dictionary_1.getDictionary)();\r\n    var shuffledWordSet = shuffle(Object.values(dictionary));\r\n    exit_loop: for (var i = 0; i < shuffledWordSet.length; i++) {\r\n        var set = shuffle(shuffledWordSet[i]);\r\n        for (var j = 0; j < set.length; j++) {\r\n            var word = set[j];\r\n            if (word.length >= 3) {\r\n                if (!maxLength || (maxLength && word.length <= maxLength)) {\r\n                    _word = word;\r\n                    break exit_loop;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _word;\r\n};\r\nexports.random = random;\r\nfunction shuffle(array) {\r\n    var _a;\r\n    var currentIndex = array.length;\r\n    var randomIndex;\r\n    // While there remain elements to shuffle.\r\n    while (currentIndex != 0) {\r\n        // Pick a remaining element.\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        // And swap it with the current element.\r\n        _a = [\r\n            array[randomIndex],\r\n            array[currentIndex],\r\n        ], array[currentIndex] = _a[0], array[randomIndex] = _a[1];\r\n    }\r\n    return array;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,IAAIC,YAAY,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAIF,MAAM,GAAG,UAAUG,SAAS,EAAE;EAC9B,IAAIA,SAAS,EAAE;IACX,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIC,SAAS,CAAC,oCAAoC,CAAC;IAC7D;IACAD,SAAS,GAAGE,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;IACjC,IAAIA,SAAS,GAAG,CAAC,EAAE;MACf,MAAM,IAAII,KAAK,CAAC,kDAAkD,CAAC;IACvE;EACJ;EACA,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAER,YAAY,CAACS,aAAa,GAAG;EAClD,IAAIC,eAAe,GAAGC,OAAO,CAAChB,MAAM,CAACiB,MAAM,CAACJ,UAAU,CAAC,CAAC;EACxDK,SAAS,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,eAAe,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACxD,IAAIE,GAAG,GAAGL,OAAO,CAACD,eAAe,CAACI,CAAC,CAAC,CAAC;IACrC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACD,MAAM,EAAEE,CAAC,EAAE,EAAE;MACjC,IAAIC,IAAI,GAAGF,GAAG,CAACC,CAAC,CAAC;MACjB,IAAIC,IAAI,CAACH,MAAM,IAAI,CAAC,EAAE;QAClB,IAAI,CAACb,SAAS,IAAKA,SAAS,IAAIgB,IAAI,CAACH,MAAM,IAAIb,SAAU,EAAE;UACvDK,KAAK,GAAGW,IAAI;UACZ,MAAML,SAAS;QACnB;MACJ;IACJ;EACJ;EACA,OAAON,KAAK;AAChB,CAAC;AACDV,OAAO,CAACE,MAAM,GAAGA,MAAM;AACvB,SAASY,OAAO,CAACQ,KAAK,EAAE;EACpB,IAAIC,EAAE;EACN,IAAIC,YAAY,GAAGF,KAAK,CAACJ,MAAM;EAC/B,IAAIO,WAAW;EACf;EACA,OAAOD,YAAY,IAAI,CAAC,EAAE;IACtB;IACAC,WAAW,GAAGlB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACL,MAAM,EAAE,GAAGsB,YAAY,CAAC;IACtDA,YAAY,EAAE;IACd;IACAD,EAAE,GAAG,CACDD,KAAK,CAACG,WAAW,CAAC,EAClBH,KAAK,CAACE,YAAY,CAAC,CACtB,EAAEF,KAAK,CAACE,YAAY,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAED,KAAK,CAACG,WAAW,CAAC,GAAGF,EAAE,CAAC,CAAC,CAAC;EAC9D;EACA,OAAOD,KAAK;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}